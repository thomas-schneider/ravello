tosca_definitions_version: cloudify_dsl_1_2

########################################################

imports:
  - http://www.getcloudify.org/spec/cloudify/3.3.1/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.3.1/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.1/plugin.yaml

########################################################

plugins:
    dns-plugin:
        executor: host_agent
        source: dns-plugin

########################################################
relationships:
    dns_client_uses_dns_server:
       derived_from: cloudify.relationships.connected_to
       source_interfaces:
          cloudify.interfaces.relationship_lifecycle:
             preconfigure: dns-plugin.dns_plugin.tasks.configure_resolv_conf


########################################################
node_types:
    policy_node_type:
       derived_from: cloudify.nodes.SoftwareComponent
       properties:
          nodes_to_monitor:
             default: []
       interfaces:
          cloudify.interfaces.lifecycle:
             start:
                implementation: scripts/policy-start.sh
                executor: central_deployment_agent
             stop:
                implementation: scripts/policy-stop.sh
                executor: central_deployment_agent
########################################################

inputs:
    cloudify_agent:
        default:  'ubuntu'

    server_image:
        default: 05bb3a46-ca32-4032-bedd-8d7ebd5c8100 # Ubuntu Server 14.04

    server_flavor_name:
        default: m1.medium

    server_security_groups:
        default: ['All_ports_open']
    
    bono_floating_ip:
        default: 172.25.1.18
    
    ellis_floating_ip:
        default: 172.25.1.17
########################################################

node_templates:
    a_node:
        type: cloudify.nodes.Compute
        properties:
           install_agent: false

    policy_node:
        type: policy_node_type
        relationships:
           - target: bono_vm
             type: cloudify.relationships.depends_on
           - target: sprout_vm
             type: cloudify.relationships.depends_on
           - target: a_node
             type: cloudify.relationships.contained_in
        properties:
           nodes_to_monitor:
              - bono_vm
              - sprout_vm

        
    bono_ip:   
        type: cloudify.openstack.nodes.FloatingIP
        interfaces:
          cloudify.interfaces.lifecycle:
            create:
              inputs:
                args:
                  floating_network_name: public_admin 
                  floating_ip_address: { get_input: bono_floating_ip }
 
    ellis_ip:
        type: cloudify.openstack.nodes.FloatingIP
        interfaces:
          cloudify.interfaces.lifecycle:
            create:
              inputs:
                args:
                  floating_network_name: public_admin
                  floating_ip_address: { get_input: ellis_floating_ip }


    bono_vm:
        type: cloudify.openstack.nodes.Server
        properties:
            cloudify_agent:
                user: { get_input: cloudify_agent }
            server:
                image: { get_input: server_image }
                flavor_name: { get_input: server_flavor_name }
                security_groups: { get_input: server_security_groups }
        relationships:
            -   type: cloudify.openstack.server_connected_to_floating_ip
                target: bono_ip
            -   type: cloudify.relationships.depends_on
                target: All_ports_open

        interfaces:
            cloudify.interfaces.monitoring_agent:
               install:
                  implementation: diamond.diamond_agent.tasks.install
                  inputs:
                     diamond_config:
                        interval: 5
               start: diamond.diamond_agent.tasks.start
               stop: diamond.diamond_agent.tasks.stop
               uninstall: diamond.diamond_agent.tasks.uninstall

            cloudify.interfaces.monitoring:
               start:
                  implementation: diamond.diamond_agent.tasks.add_collectors
                  inputs:
                     collectors_config:
                           CPUCollector: {}

    ellis_vm:
        type: cloudify.openstack.nodes.Server
        properties:
            cloudify_agent:
                user: { get_input: cloudify_agent }
            server:
                image: { get_input: server_image }
                flavor_name: { get_input: server_flavor_name }
                security_groups: { get_input: server_security_groups }
        relationships:
            -   type: cloudify.openstack.server_connected_to_floating_ip
                target: ellis_ip
            -   type: cloudify.relationships.depends_on
                target: All_ports_open

    sprout_vm:
        type: cloudify.openstack.nodes.Server
        properties:
            cloudify_agent:
                user: { get_input: cloudify_agent }
            server:
                image: { get_input: server_image }
                flavor_name: { get_input: server_flavor_name }
                security_groups: { get_input: server_security_groups }
        relationships:
            -   type: cloudify.relationships.depends_on
                target: All_ports_open

        interfaces:
            cloudify.interfaces.monitoring_agent:
               install:
                  implementation: diamond.diamond_agent.tasks.install
                  inputs:
                     diamond_config:
                        interval: 5
               start: diamond.diamond_agent.tasks.start
               stop: diamond.diamond_agent.tasks.stop
               uninstall: diamond.diamond_agent.tasks.uninstall

            cloudify.interfaces.monitoring:
               start:
                  implementation: diamond.diamond_agent.tasks.add_collectors
                  inputs:
                     collectors_config:
                           CPUCollector: {}
    homer_vm:
        type: cloudify.openstack.nodes.Server
        properties:
            cloudify_agent:
                user: { get_input: cloudify_agent }
            server:
                image: { get_input: server_image }
                flavor_name: { get_input: server_flavor_name }
                security_groups: { get_input: server_security_groups }
        relationships:
            -   type: cloudify.relationships.depends_on
                target: All_ports_open


    homestead_vm:
        type: cloudify.openstack.nodes.Server
        properties:
            cloudify_agent:
                user: { get_input: cloudify_agent }
            server:
                image: { get_input: server_image }
                flavor_name: { get_input: server_flavor_name }
                security_groups: { get_input: server_security_groups }
        relationships:
            -   type: cloudify.relationships.depends_on
                target: All_ports_open


    ralf_vm:
        type: cloudify.openstack.nodes.Server
        properties:
            cloudify_agent:
                user: { get_input: cloudify_agent }
            server:
                image: { get_input: server_image }
                flavor_name: { get_input: server_flavor_name }
                security_groups: { get_input: server_security_groups }
        relationships:
            -   type: cloudify.relationships.depends_on
                target: All_ports_open

    dns_vm:
        type: cloudify.openstack.nodes.Server
        properties:
            cloudify_agent:
                user: { get_input: cloudify_agent }
            server:
                image: { get_input: server_image }
                flavor_name: { get_input: server_flavor_name }
                security_groups: { get_input: server_security_groups }
        relationships:
            -   type: cloudify.relationships.depends_on
                target: All_ports_open

    All_ports_open:
        type: cloudify.openstack.nodes.SecurityGroup
        properties:
            security_group:
                name: All_ports_open
            rules:
                - remote_ip_prefix: 0.0.0.0/0
                  port_range_min: 1
                  port_range_max: 65535
                  protocol: tcp
                - remote_ip_prefix: 0.0.0.0/0
                  port_range_min: 1
                  port_range_max: 65535
                  protocol: udp

########################################################
    bono_app:
        type: cloudify.nodes.SoftwareComponent
        interfaces:
           cloudify.interfaces.lifecycle:
              create:
                 implementation: scripts/bono.sh
                 inputs:
                    public_ip: { get_attribute: [ bono_ip, floating_ip_address ] }
                    dns_ip: { get_attribute: [ dns_vm, ip ]  }
        relationships:
            -  type: cloudify.relationships.contained_in
               target: bono_vm
            -  type: dns_client_uses_dns_server
               target: dns_app

    ellis_app:
        type: cloudify.nodes.SoftwareComponent
        interfaces:
           cloudify.interfaces.lifecycle:
              create:
                 implementation: scripts/ellis.sh
                 inputs:
                    public_ip: { get_attribute: [ellis_ip, floating_ip_address] }
                    dns_ip: { get_attribute: [dns_vm, ip] }
        relationships:
            -  type: cloudify.relationships.contained_in
               target: ellis_vm
            -  type: dns_client_uses_dns_server
               target: dns_app

    ralf_app:
        type: cloudify.nodes.SoftwareComponent
        interfaces:
           cloudify.interfaces.lifecycle:
              create:
                 implementation: scripts/ralf.sh
                 inputs:
                    dns_ip: { get_attribute: [ dns_vm, ip ] }
        relationships:
            -  type: cloudify.relationships.contained_in
               target: ralf_vm
            -  type: dns_client_uses_dns_server
               target: dns_app

    homestead_app:
        type: cloudify.nodes.SoftwareComponent
        interfaces:
           cloudify.interfaces.lifecycle:
              create:
                 implementation: scripts/homestead.sh
                 inputs:
                    dns_ip: { get_attribute: [dns_vm, ip] }
        relationships:
            -  type: cloudify.relationships.contained_in
               target: homestead_vm
            -  type: dns_client_uses_dns_server
               target: dns_app

    homer_app:
        type: cloudify.nodes.SoftwareComponent
        interfaces:
           cloudify.interfaces.lifecycle:
              create:
                 implementation: scripts/homer.sh
                 inputs:
                    dns_ip: { get_attribute: [dns_vm, ip] }
        relationships:
            -  type: cloudify.relationships.contained_in
               target: homer_vm
            -  type: dns_client_uses_dns_server
               target: dns_app

    sprout_app:
        type: cloudify.nodes.SoftwareComponent
        interfaces:
           cloudify.interfaces.lifecycle:
              create:
                 implementation: scripts/sprout.sh
                 inputs:
                    dns_ip: { get_attribute: [dns_vm, ip] }
        relationships:
            -  type: cloudify.relationships.contained_in
               target: sprout_vm
            -  type: dns_client_uses_dns_server
               target: dns_app

    dns_app:
        type: cloudify.nodes.SoftwareComponent
        interfaces:
           cloudify.interfaces.lifecycle:
              create:
                 implementation: scripts/dns.sh
                 inputs:
                    dns_ip: { get_attribute: [dns_vm, ip] }
        relationships:
            -  type: cloudify.relationships.contained_in
               target: dns_vm

########################################################

    dns_app_config:
        type: cloudify.nodes.SoftwareComponent
        interfaces:
           cloudify.interfaces.lifecycle:
              create:
                 implementation: scripts/dns-config.sh
                 inputs:
                    process:
                       command_prefix: /usr/bin/sudo
        relationships:
                -  type: cloudify.relationships.contained_in
                   target: dns_vm
                -  type: cloudify.relationships.connected_to
                   target: dns_app
                -  type: cloudify.relationships.connected_to
                   target: bono_app
                -  type: cloudify.relationships.connected_to
                   target: ellis_app
                -  type: cloudify.relationships.connected_to
                   target: ralf_app
                -  type: cloudify.relationships.connected_to
                   target: sprout_app
                -  type: cloudify.relationships.connected_to
                   target: homer_app
                -  type: cloudify.relationships.connected_to
                   target: homestead_app

outputs:
  web:
    description: Web application endpoint
    value:
      ip_ellis: { get_attribute: [ ellis_ip, floating_ip_address ] }
      ip_bono: { get_attribute: [ bono_ip, floating_ip_address ] }
      signup_code: secret
